/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-04-22")
public class NovalChapter implements org.apache.thrift.TBase<NovalChapter, NovalChapter._Fields>, java.io.Serializable, Cloneable, Comparable<NovalChapter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NovalChapter");

  private static final org.apache.thrift.protocol.TField NOVAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("novalName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NOVAL_CHAPTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("novalChapterName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_CHAPTER_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChapter", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NEXT_CHAPTER_FIELD_DESC = new org.apache.thrift.protocol.TField("nextChapter", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NovalChapterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NovalChapterTupleSchemeFactory();

  public java.lang.String novalName; // optional
  public java.lang.String novalChapterName; // optional
  public java.lang.String type; // optional
  public java.lang.String context; // optional
  public java.lang.String lastChapter; // optional
  public java.lang.String nextChapter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOVAL_NAME((short)1, "novalName"),
    NOVAL_CHAPTER_NAME((short)2, "novalChapterName"),
    TYPE((short)3, "type"),
    CONTEXT((short)4, "context"),
    LAST_CHAPTER((short)5, "lastChapter"),
    NEXT_CHAPTER((short)6, "nextChapter");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOVAL_NAME
          return NOVAL_NAME;
        case 2: // NOVAL_CHAPTER_NAME
          return NOVAL_CHAPTER_NAME;
        case 3: // TYPE
          return TYPE;
        case 4: // CONTEXT
          return CONTEXT;
        case 5: // LAST_CHAPTER
          return LAST_CHAPTER;
        case 6: // NEXT_CHAPTER
          return NEXT_CHAPTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.NOVAL_NAME,_Fields.NOVAL_CHAPTER_NAME,_Fields.TYPE,_Fields.CONTEXT,_Fields.LAST_CHAPTER,_Fields.NEXT_CHAPTER};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOVAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("novalName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.NOVAL_CHAPTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("novalChapterName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.LAST_CHAPTER, new org.apache.thrift.meta_data.FieldMetaData("lastChapter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.NEXT_CHAPTER, new org.apache.thrift.meta_data.FieldMetaData("nextChapter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NovalChapter.class, metaDataMap);
  }

  public NovalChapter() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NovalChapter(NovalChapter other) {
    if (other.isSetNovalName()) {
      this.novalName = other.novalName;
    }
    if (other.isSetNovalChapterName()) {
      this.novalChapterName = other.novalChapterName;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetContext()) {
      this.context = other.context;
    }
    if (other.isSetLastChapter()) {
      this.lastChapter = other.lastChapter;
    }
    if (other.isSetNextChapter()) {
      this.nextChapter = other.nextChapter;
    }
  }

  public NovalChapter deepCopy() {
    return new NovalChapter(this);
  }

  @Override
  public void clear() {
    this.novalName = null;
    this.novalChapterName = null;
    this.type = null;
    this.context = null;
    this.lastChapter = null;
    this.nextChapter = null;
  }

  public java.lang.String getNovalName() {
    return this.novalName;
  }

  public NovalChapter setNovalName(java.lang.String novalName) {
    this.novalName = novalName;
    return this;
  }

  public void unsetNovalName() {
    this.novalName = null;
  }

  /** Returns true if field novalName is set (has been assigned a value) and false otherwise */
  public boolean isSetNovalName() {
    return this.novalName != null;
  }

  public void setNovalNameIsSet(boolean value) {
    if (!value) {
      this.novalName = null;
    }
  }

  public java.lang.String getNovalChapterName() {
    return this.novalChapterName;
  }

  public NovalChapter setNovalChapterName(java.lang.String novalChapterName) {
    this.novalChapterName = novalChapterName;
    return this;
  }

  public void unsetNovalChapterName() {
    this.novalChapterName = null;
  }

  /** Returns true if field novalChapterName is set (has been assigned a value) and false otherwise */
  public boolean isSetNovalChapterName() {
    return this.novalChapterName != null;
  }

  public void setNovalChapterNameIsSet(boolean value) {
    if (!value) {
      this.novalChapterName = null;
    }
  }

  public java.lang.String getType() {
    return this.type;
  }

  public NovalChapter setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getContext() {
    return this.context;
  }

  public NovalChapter setContext(java.lang.String context) {
    this.context = context;
    return this;
  }

  public void unsetContext() {
    this.context = null;
  }

  /** Returns true if field context is set (has been assigned a value) and false otherwise */
  public boolean isSetContext() {
    return this.context != null;
  }

  public void setContextIsSet(boolean value) {
    if (!value) {
      this.context = null;
    }
  }

  public java.lang.String getLastChapter() {
    return this.lastChapter;
  }

  public NovalChapter setLastChapter(java.lang.String lastChapter) {
    this.lastChapter = lastChapter;
    return this;
  }

  public void unsetLastChapter() {
    this.lastChapter = null;
  }

  /** Returns true if field lastChapter is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChapter() {
    return this.lastChapter != null;
  }

  public void setLastChapterIsSet(boolean value) {
    if (!value) {
      this.lastChapter = null;
    }
  }

  public java.lang.String getNextChapter() {
    return this.nextChapter;
  }

  public NovalChapter setNextChapter(java.lang.String nextChapter) {
    this.nextChapter = nextChapter;
    return this;
  }

  public void unsetNextChapter() {
    this.nextChapter = null;
  }

  /** Returns true if field nextChapter is set (has been assigned a value) and false otherwise */
  public boolean isSetNextChapter() {
    return this.nextChapter != null;
  }

  public void setNextChapterIsSet(boolean value) {
    if (!value) {
      this.nextChapter = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NOVAL_NAME:
      if (value == null) {
        unsetNovalName();
      } else {
        setNovalName((java.lang.String)value);
      }
      break;

    case NOVAL_CHAPTER_NAME:
      if (value == null) {
        unsetNovalChapterName();
      } else {
        setNovalChapterName((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case CONTEXT:
      if (value == null) {
        unsetContext();
      } else {
        setContext((java.lang.String)value);
      }
      break;

    case LAST_CHAPTER:
      if (value == null) {
        unsetLastChapter();
      } else {
        setLastChapter((java.lang.String)value);
      }
      break;

    case NEXT_CHAPTER:
      if (value == null) {
        unsetNextChapter();
      } else {
        setNextChapter((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NOVAL_NAME:
      return getNovalName();

    case NOVAL_CHAPTER_NAME:
      return getNovalChapterName();

    case TYPE:
      return getType();

    case CONTEXT:
      return getContext();

    case LAST_CHAPTER:
      return getLastChapter();

    case NEXT_CHAPTER:
      return getNextChapter();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NOVAL_NAME:
      return isSetNovalName();
    case NOVAL_CHAPTER_NAME:
      return isSetNovalChapterName();
    case TYPE:
      return isSetType();
    case CONTEXT:
      return isSetContext();
    case LAST_CHAPTER:
      return isSetLastChapter();
    case NEXT_CHAPTER:
      return isSetNextChapter();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NovalChapter)
      return this.equals((NovalChapter)that);
    return false;
  }

  public boolean equals(NovalChapter that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_novalName = true && this.isSetNovalName();
    boolean that_present_novalName = true && that.isSetNovalName();
    if (this_present_novalName || that_present_novalName) {
      if (!(this_present_novalName && that_present_novalName))
        return false;
      if (!this.novalName.equals(that.novalName))
        return false;
    }

    boolean this_present_novalChapterName = true && this.isSetNovalChapterName();
    boolean that_present_novalChapterName = true && that.isSetNovalChapterName();
    if (this_present_novalChapterName || that_present_novalChapterName) {
      if (!(this_present_novalChapterName && that_present_novalChapterName))
        return false;
      if (!this.novalChapterName.equals(that.novalChapterName))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_context = true && this.isSetContext();
    boolean that_present_context = true && that.isSetContext();
    if (this_present_context || that_present_context) {
      if (!(this_present_context && that_present_context))
        return false;
      if (!this.context.equals(that.context))
        return false;
    }

    boolean this_present_lastChapter = true && this.isSetLastChapter();
    boolean that_present_lastChapter = true && that.isSetLastChapter();
    if (this_present_lastChapter || that_present_lastChapter) {
      if (!(this_present_lastChapter && that_present_lastChapter))
        return false;
      if (!this.lastChapter.equals(that.lastChapter))
        return false;
    }

    boolean this_present_nextChapter = true && this.isSetNextChapter();
    boolean that_present_nextChapter = true && that.isSetNextChapter();
    if (this_present_nextChapter || that_present_nextChapter) {
      if (!(this_present_nextChapter && that_present_nextChapter))
        return false;
      if (!this.nextChapter.equals(that.nextChapter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNovalName()) ? 131071 : 524287);
    if (isSetNovalName())
      hashCode = hashCode * 8191 + novalName.hashCode();

    hashCode = hashCode * 8191 + ((isSetNovalChapterName()) ? 131071 : 524287);
    if (isSetNovalChapterName())
      hashCode = hashCode * 8191 + novalChapterName.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetContext()) ? 131071 : 524287);
    if (isSetContext())
      hashCode = hashCode * 8191 + context.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastChapter()) ? 131071 : 524287);
    if (isSetLastChapter())
      hashCode = hashCode * 8191 + lastChapter.hashCode();

    hashCode = hashCode * 8191 + ((isSetNextChapter()) ? 131071 : 524287);
    if (isSetNextChapter())
      hashCode = hashCode * 8191 + nextChapter.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NovalChapter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNovalName()).compareTo(other.isSetNovalName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNovalName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.novalName, other.novalName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNovalChapterName()).compareTo(other.isSetNovalChapterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNovalChapterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.novalChapterName, other.novalChapterName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContext()).compareTo(other.isSetContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, other.context);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastChapter()).compareTo(other.isSetLastChapter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChapter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChapter, other.lastChapter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNextChapter()).compareTo(other.isSetNextChapter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextChapter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextChapter, other.nextChapter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NovalChapter(");
    boolean first = true;

    if (isSetNovalName()) {
      sb.append("novalName:");
      if (this.novalName == null) {
        sb.append("null");
      } else {
        sb.append(this.novalName);
      }
      first = false;
    }
    if (isSetNovalChapterName()) {
      if (!first) sb.append(", ");
      sb.append("novalChapterName:");
      if (this.novalChapterName == null) {
        sb.append("null");
      } else {
        sb.append(this.novalChapterName);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetContext()) {
      if (!first) sb.append(", ");
      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
    }
    if (isSetLastChapter()) {
      if (!first) sb.append(", ");
      sb.append("lastChapter:");
      if (this.lastChapter == null) {
        sb.append("null");
      } else {
        sb.append(this.lastChapter);
      }
      first = false;
    }
    if (isSetNextChapter()) {
      if (!first) sb.append(", ");
      sb.append("nextChapter:");
      if (this.nextChapter == null) {
        sb.append("null");
      } else {
        sb.append(this.nextChapter);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NovalChapterStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NovalChapterStandardScheme getScheme() {
      return new NovalChapterStandardScheme();
    }
  }

  private static class NovalChapterStandardScheme extends org.apache.thrift.scheme.StandardScheme<NovalChapter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NovalChapter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOVAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.novalName = iprot.readString();
              struct.setNovalNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NOVAL_CHAPTER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.novalChapterName = iprot.readString();
              struct.setNovalChapterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.context = iprot.readString();
              struct.setContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_CHAPTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChapter = iprot.readString();
              struct.setLastChapterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NEXT_CHAPTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextChapter = iprot.readString();
              struct.setNextChapterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NovalChapter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.novalName != null) {
        if (struct.isSetNovalName()) {
          oprot.writeFieldBegin(NOVAL_NAME_FIELD_DESC);
          oprot.writeString(struct.novalName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.novalChapterName != null) {
        if (struct.isSetNovalChapterName()) {
          oprot.writeFieldBegin(NOVAL_CHAPTER_NAME_FIELD_DESC);
          oprot.writeString(struct.novalChapterName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.context != null) {
        if (struct.isSetContext()) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          oprot.writeString(struct.context);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastChapter != null) {
        if (struct.isSetLastChapter()) {
          oprot.writeFieldBegin(LAST_CHAPTER_FIELD_DESC);
          oprot.writeString(struct.lastChapter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nextChapter != null) {
        if (struct.isSetNextChapter()) {
          oprot.writeFieldBegin(NEXT_CHAPTER_FIELD_DESC);
          oprot.writeString(struct.nextChapter);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NovalChapterTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NovalChapterTupleScheme getScheme() {
      return new NovalChapterTupleScheme();
    }
  }

  private static class NovalChapterTupleScheme extends org.apache.thrift.scheme.TupleScheme<NovalChapter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NovalChapter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNovalName()) {
        optionals.set(0);
      }
      if (struct.isSetNovalChapterName()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetContext()) {
        optionals.set(3);
      }
      if (struct.isSetLastChapter()) {
        optionals.set(4);
      }
      if (struct.isSetNextChapter()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetNovalName()) {
        oprot.writeString(struct.novalName);
      }
      if (struct.isSetNovalChapterName()) {
        oprot.writeString(struct.novalChapterName);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetContext()) {
        oprot.writeString(struct.context);
      }
      if (struct.isSetLastChapter()) {
        oprot.writeString(struct.lastChapter);
      }
      if (struct.isSetNextChapter()) {
        oprot.writeString(struct.nextChapter);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NovalChapter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.novalName = iprot.readString();
        struct.setNovalNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.novalChapterName = iprot.readString();
        struct.setNovalChapterNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.context = iprot.readString();
        struct.setContextIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastChapter = iprot.readString();
        struct.setLastChapterIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nextChapter = iprot.readString();
        struct.setNextChapterIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

