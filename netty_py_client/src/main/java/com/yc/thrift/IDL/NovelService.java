/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yc.thrift.IDL;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-05-15")
public class NovelService {

  public interface Iface {

    public NovelChapterContext getNovelChapterContextByChapterUrl(String chapterUrl) throws org.apache.thrift.TException;

    public NovelChapter getNovelChapterListByNovelUrl(String novelUrl) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getNovelChapterContextByChapterUrl(String chapterUrl, org.apache.thrift.async.AsyncMethodCallback<NovelChapterContext> resultHandler) throws org.apache.thrift.TException;

    public void getNovelChapterListByNovelUrl(String novelUrl, org.apache.thrift.async.AsyncMethodCallback<NovelChapter> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public NovelChapterContext getNovelChapterContextByChapterUrl(String chapterUrl) throws org.apache.thrift.TException
    {
      send_getNovelChapterContextByChapterUrl(chapterUrl);
      return recv_getNovelChapterContextByChapterUrl();
    }

    public void send_getNovelChapterContextByChapterUrl(String chapterUrl) throws org.apache.thrift.TException
    {
      getNovelChapterContextByChapterUrl_args args = new getNovelChapterContextByChapterUrl_args();
      args.setChapterUrl(chapterUrl);
      sendBase("getNovelChapterContextByChapterUrl", args);
    }

    public NovelChapterContext recv_getNovelChapterContextByChapterUrl() throws org.apache.thrift.TException
    {
      getNovelChapterContextByChapterUrl_result result = new getNovelChapterContextByChapterUrl_result();
      receiveBase(result, "getNovelChapterContextByChapterUrl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNovelChapterContextByChapterUrl failed: unknown result");
    }

    public NovelChapter getNovelChapterListByNovelUrl(String novelUrl) throws org.apache.thrift.TException
    {
      send_getNovelChapterListByNovelUrl(novelUrl);
      return recv_getNovelChapterListByNovelUrl();
    }

    public void send_getNovelChapterListByNovelUrl(String novelUrl) throws org.apache.thrift.TException
    {
      getNovelChapterListByNovelUrl_args args = new getNovelChapterListByNovelUrl_args();
      args.setNovelUrl(novelUrl);
      sendBase("getNovelChapterListByNovelUrl", args);
    }

    public NovelChapter recv_getNovelChapterListByNovelUrl() throws org.apache.thrift.TException
    {
      getNovelChapterListByNovelUrl_result result = new getNovelChapterListByNovelUrl_result();
      receiveBase(result, "getNovelChapterListByNovelUrl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNovelChapterListByNovelUrl failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getNovelChapterContextByChapterUrl(String chapterUrl, org.apache.thrift.async.AsyncMethodCallback<NovelChapterContext> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNovelChapterContextByChapterUrl_call method_call = new getNovelChapterContextByChapterUrl_call(chapterUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNovelChapterContextByChapterUrl_call extends org.apache.thrift.async.TAsyncMethodCall<NovelChapterContext> {
      private String chapterUrl;
      public getNovelChapterContextByChapterUrl_call(String chapterUrl, org.apache.thrift.async.AsyncMethodCallback<NovelChapterContext> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chapterUrl = chapterUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNovelChapterContextByChapterUrl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNovelChapterContextByChapterUrl_args args = new getNovelChapterContextByChapterUrl_args();
        args.setChapterUrl(chapterUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NovelChapterContext getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNovelChapterContextByChapterUrl();
      }
    }

    public void getNovelChapterListByNovelUrl(String novelUrl, org.apache.thrift.async.AsyncMethodCallback<NovelChapter> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNovelChapterListByNovelUrl_call method_call = new getNovelChapterListByNovelUrl_call(novelUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNovelChapterListByNovelUrl_call extends org.apache.thrift.async.TAsyncMethodCall<NovelChapter> {
      private String novelUrl;
      public getNovelChapterListByNovelUrl_call(String novelUrl, org.apache.thrift.async.AsyncMethodCallback<NovelChapter> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.novelUrl = novelUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNovelChapterListByNovelUrl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNovelChapterListByNovelUrl_args args = new getNovelChapterListByNovelUrl_args();
        args.setNovelUrl(novelUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NovelChapter getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNovelChapterListByNovelUrl();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getNovelChapterContextByChapterUrl", new getNovelChapterContextByChapterUrl());
      processMap.put("getNovelChapterListByNovelUrl", new getNovelChapterListByNovelUrl());
      return processMap;
    }

    public static class getNovelChapterContextByChapterUrl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNovelChapterContextByChapterUrl_args> {
      public getNovelChapterContextByChapterUrl() {
        super("getNovelChapterContextByChapterUrl");
      }

      public getNovelChapterContextByChapterUrl_args getEmptyArgsInstance() {
        return new getNovelChapterContextByChapterUrl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getNovelChapterContextByChapterUrl_result getResult(I iface, getNovelChapterContextByChapterUrl_args args) throws org.apache.thrift.TException {
        getNovelChapterContextByChapterUrl_result result = new getNovelChapterContextByChapterUrl_result();
        result.success = iface.getNovelChapterContextByChapterUrl(args.chapterUrl);
        return result;
      }
    }

    public static class getNovelChapterListByNovelUrl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNovelChapterListByNovelUrl_args> {
      public getNovelChapterListByNovelUrl() {
        super("getNovelChapterListByNovelUrl");
      }

      public getNovelChapterListByNovelUrl_args getEmptyArgsInstance() {
        return new getNovelChapterListByNovelUrl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getNovelChapterListByNovelUrl_result getResult(I iface, getNovelChapterListByNovelUrl_args args) throws org.apache.thrift.TException {
        getNovelChapterListByNovelUrl_result result = new getNovelChapterListByNovelUrl_result();
        result.success = iface.getNovelChapterListByNovelUrl(args.novelUrl);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getNovelChapterContextByChapterUrl", new getNovelChapterContextByChapterUrl());
      processMap.put("getNovelChapterListByNovelUrl", new getNovelChapterListByNovelUrl());
      return processMap;
    }

    public static class getNovelChapterContextByChapterUrl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNovelChapterContextByChapterUrl_args, NovelChapterContext> {
      public getNovelChapterContextByChapterUrl() {
        super("getNovelChapterContextByChapterUrl");
      }

      public getNovelChapterContextByChapterUrl_args getEmptyArgsInstance() {
        return new getNovelChapterContextByChapterUrl_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<NovelChapterContext> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<NovelChapterContext>() { 
          public void onComplete(NovelChapterContext o) {
            getNovelChapterContextByChapterUrl_result result = new getNovelChapterContextByChapterUrl_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getNovelChapterContextByChapterUrl_result result = new getNovelChapterContextByChapterUrl_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNovelChapterContextByChapterUrl_args args, org.apache.thrift.async.AsyncMethodCallback<NovelChapterContext> resultHandler) throws org.apache.thrift.TException {
        iface.getNovelChapterContextByChapterUrl(args.chapterUrl,resultHandler);
      }
    }

    public static class getNovelChapterListByNovelUrl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNovelChapterListByNovelUrl_args, NovelChapter> {
      public getNovelChapterListByNovelUrl() {
        super("getNovelChapterListByNovelUrl");
      }

      public getNovelChapterListByNovelUrl_args getEmptyArgsInstance() {
        return new getNovelChapterListByNovelUrl_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<NovelChapter> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<NovelChapter>() { 
          public void onComplete(NovelChapter o) {
            getNovelChapterListByNovelUrl_result result = new getNovelChapterListByNovelUrl_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getNovelChapterListByNovelUrl_result result = new getNovelChapterListByNovelUrl_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNovelChapterListByNovelUrl_args args, org.apache.thrift.async.AsyncMethodCallback<NovelChapter> resultHandler) throws org.apache.thrift.TException {
        iface.getNovelChapterListByNovelUrl(args.novelUrl,resultHandler);
      }
    }

  }

  public static class getNovelChapterContextByChapterUrl_args implements org.apache.thrift.TBase<getNovelChapterContextByChapterUrl_args, getNovelChapterContextByChapterUrl_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNovelChapterContextByChapterUrl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNovelChapterContextByChapterUrl_args");

    private static final org.apache.thrift.protocol.TField CHAPTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("chapterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNovelChapterContextByChapterUrl_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNovelChapterContextByChapterUrl_argsTupleSchemeFactory();

    public String chapterUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHAPTER_URL((short)1, "chapterUrl");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHAPTER_URL
            return CHAPTER_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHAPTER_URL, new org.apache.thrift.meta_data.FieldMetaData("chapterUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNovelChapterContextByChapterUrl_args.class, metaDataMap);
    }

    public getNovelChapterContextByChapterUrl_args() {
    }

    public getNovelChapterContextByChapterUrl_args(
      String chapterUrl)
    {
      this();
      this.chapterUrl = chapterUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNovelChapterContextByChapterUrl_args(getNovelChapterContextByChapterUrl_args other) {
      if (other.isSetChapterUrl()) {
        this.chapterUrl = other.chapterUrl;
      }
    }

    public getNovelChapterContextByChapterUrl_args deepCopy() {
      return new getNovelChapterContextByChapterUrl_args(this);
    }

    @Override
    public void clear() {
      this.chapterUrl = null;
    }

    public String getChapterUrl() {
      return this.chapterUrl;
    }

    public getNovelChapterContextByChapterUrl_args setChapterUrl(String chapterUrl) {
      this.chapterUrl = chapterUrl;
      return this;
    }

    public void unsetChapterUrl() {
      this.chapterUrl = null;
    }

    /** Returns true if field chapterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetChapterUrl() {
      return this.chapterUrl != null;
    }

    public void setChapterUrlIsSet(boolean value) {
      if (!value) {
        this.chapterUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHAPTER_URL:
        if (value == null) {
          unsetChapterUrl();
        } else {
          setChapterUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHAPTER_URL:
        return getChapterUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHAPTER_URL:
        return isSetChapterUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNovelChapterContextByChapterUrl_args)
        return this.equals((getNovelChapterContextByChapterUrl_args)that);
      return false;
    }

    public boolean equals(getNovelChapterContextByChapterUrl_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chapterUrl = true && this.isSetChapterUrl();
      boolean that_present_chapterUrl = true && that.isSetChapterUrl();
      if (this_present_chapterUrl || that_present_chapterUrl) {
        if (!(this_present_chapterUrl && that_present_chapterUrl))
          return false;
        if (!this.chapterUrl.equals(that.chapterUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetChapterUrl()) ? 131071 : 524287);
      if (isSetChapterUrl())
        hashCode = hashCode * 8191 + chapterUrl.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNovelChapterContextByChapterUrl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChapterUrl()).compareTo(other.isSetChapterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChapterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chapterUrl, other.chapterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNovelChapterContextByChapterUrl_args(");
      boolean first = true;

      sb.append("chapterUrl:");
      if (this.chapterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.chapterUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (chapterUrl == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'chapterUrl' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNovelChapterContextByChapterUrl_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNovelChapterContextByChapterUrl_argsStandardScheme getScheme() {
        return new getNovelChapterContextByChapterUrl_argsStandardScheme();
      }
    }

    private static class getNovelChapterContextByChapterUrl_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNovelChapterContextByChapterUrl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNovelChapterContextByChapterUrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHAPTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chapterUrl = iprot.readString();
                struct.setChapterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNovelChapterContextByChapterUrl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chapterUrl != null) {
          oprot.writeFieldBegin(CHAPTER_URL_FIELD_DESC);
          oprot.writeString(struct.chapterUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNovelChapterContextByChapterUrl_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNovelChapterContextByChapterUrl_argsTupleScheme getScheme() {
        return new getNovelChapterContextByChapterUrl_argsTupleScheme();
      }
    }

    private static class getNovelChapterContextByChapterUrl_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNovelChapterContextByChapterUrl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNovelChapterContextByChapterUrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.chapterUrl);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNovelChapterContextByChapterUrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.chapterUrl = iprot.readString();
        struct.setChapterUrlIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNovelChapterContextByChapterUrl_result implements org.apache.thrift.TBase<getNovelChapterContextByChapterUrl_result, getNovelChapterContextByChapterUrl_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNovelChapterContextByChapterUrl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNovelChapterContextByChapterUrl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNovelChapterContextByChapterUrl_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNovelChapterContextByChapterUrl_resultTupleSchemeFactory();

    public NovelChapterContext success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NovelChapterContext.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNovelChapterContextByChapterUrl_result.class, metaDataMap);
    }

    public getNovelChapterContextByChapterUrl_result() {
    }

    public getNovelChapterContextByChapterUrl_result(
      NovelChapterContext success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNovelChapterContextByChapterUrl_result(getNovelChapterContextByChapterUrl_result other) {
      if (other.isSetSuccess()) {
        this.success = new NovelChapterContext(other.success);
      }
    }

    public getNovelChapterContextByChapterUrl_result deepCopy() {
      return new getNovelChapterContextByChapterUrl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NovelChapterContext getSuccess() {
      return this.success;
    }

    public getNovelChapterContextByChapterUrl_result setSuccess(NovelChapterContext success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NovelChapterContext)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNovelChapterContextByChapterUrl_result)
        return this.equals((getNovelChapterContextByChapterUrl_result)that);
      return false;
    }

    public boolean equals(getNovelChapterContextByChapterUrl_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNovelChapterContextByChapterUrl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNovelChapterContextByChapterUrl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNovelChapterContextByChapterUrl_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNovelChapterContextByChapterUrl_resultStandardScheme getScheme() {
        return new getNovelChapterContextByChapterUrl_resultStandardScheme();
      }
    }

    private static class getNovelChapterContextByChapterUrl_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNovelChapterContextByChapterUrl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNovelChapterContextByChapterUrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NovelChapterContext();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNovelChapterContextByChapterUrl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNovelChapterContextByChapterUrl_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNovelChapterContextByChapterUrl_resultTupleScheme getScheme() {
        return new getNovelChapterContextByChapterUrl_resultTupleScheme();
      }
    }

    private static class getNovelChapterContextByChapterUrl_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNovelChapterContextByChapterUrl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNovelChapterContextByChapterUrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNovelChapterContextByChapterUrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NovelChapterContext();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNovelChapterListByNovelUrl_args implements org.apache.thrift.TBase<getNovelChapterListByNovelUrl_args, getNovelChapterListByNovelUrl_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNovelChapterListByNovelUrl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNovelChapterListByNovelUrl_args");

    private static final org.apache.thrift.protocol.TField NOVEL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("novelUrl", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNovelChapterListByNovelUrl_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNovelChapterListByNovelUrl_argsTupleSchemeFactory();

    public String novelUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOVEL_URL((short)1, "novelUrl");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOVEL_URL
            return NOVEL_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOVEL_URL, new org.apache.thrift.meta_data.FieldMetaData("novelUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNovelChapterListByNovelUrl_args.class, metaDataMap);
    }

    public getNovelChapterListByNovelUrl_args() {
    }

    public getNovelChapterListByNovelUrl_args(
      String novelUrl)
    {
      this();
      this.novelUrl = novelUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNovelChapterListByNovelUrl_args(getNovelChapterListByNovelUrl_args other) {
      if (other.isSetNovelUrl()) {
        this.novelUrl = other.novelUrl;
      }
    }

    public getNovelChapterListByNovelUrl_args deepCopy() {
      return new getNovelChapterListByNovelUrl_args(this);
    }

    @Override
    public void clear() {
      this.novelUrl = null;
    }

    public String getNovelUrl() {
      return this.novelUrl;
    }

    public getNovelChapterListByNovelUrl_args setNovelUrl(String novelUrl) {
      this.novelUrl = novelUrl;
      return this;
    }

    public void unsetNovelUrl() {
      this.novelUrl = null;
    }

    /** Returns true if field novelUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetNovelUrl() {
      return this.novelUrl != null;
    }

    public void setNovelUrlIsSet(boolean value) {
      if (!value) {
        this.novelUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NOVEL_URL:
        if (value == null) {
          unsetNovelUrl();
        } else {
          setNovelUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NOVEL_URL:
        return getNovelUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NOVEL_URL:
        return isSetNovelUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNovelChapterListByNovelUrl_args)
        return this.equals((getNovelChapterListByNovelUrl_args)that);
      return false;
    }

    public boolean equals(getNovelChapterListByNovelUrl_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_novelUrl = true && this.isSetNovelUrl();
      boolean that_present_novelUrl = true && that.isSetNovelUrl();
      if (this_present_novelUrl || that_present_novelUrl) {
        if (!(this_present_novelUrl && that_present_novelUrl))
          return false;
        if (!this.novelUrl.equals(that.novelUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNovelUrl()) ? 131071 : 524287);
      if (isSetNovelUrl())
        hashCode = hashCode * 8191 + novelUrl.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNovelChapterListByNovelUrl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNovelUrl()).compareTo(other.isSetNovelUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNovelUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.novelUrl, other.novelUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNovelChapterListByNovelUrl_args(");
      boolean first = true;

      sb.append("novelUrl:");
      if (this.novelUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.novelUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (novelUrl == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'novelUrl' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNovelChapterListByNovelUrl_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNovelChapterListByNovelUrl_argsStandardScheme getScheme() {
        return new getNovelChapterListByNovelUrl_argsStandardScheme();
      }
    }

    private static class getNovelChapterListByNovelUrl_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNovelChapterListByNovelUrl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNovelChapterListByNovelUrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOVEL_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.novelUrl = iprot.readString();
                struct.setNovelUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNovelChapterListByNovelUrl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.novelUrl != null) {
          oprot.writeFieldBegin(NOVEL_URL_FIELD_DESC);
          oprot.writeString(struct.novelUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNovelChapterListByNovelUrl_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNovelChapterListByNovelUrl_argsTupleScheme getScheme() {
        return new getNovelChapterListByNovelUrl_argsTupleScheme();
      }
    }

    private static class getNovelChapterListByNovelUrl_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNovelChapterListByNovelUrl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNovelChapterListByNovelUrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.novelUrl);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNovelChapterListByNovelUrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.novelUrl = iprot.readString();
        struct.setNovelUrlIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNovelChapterListByNovelUrl_result implements org.apache.thrift.TBase<getNovelChapterListByNovelUrl_result, getNovelChapterListByNovelUrl_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNovelChapterListByNovelUrl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNovelChapterListByNovelUrl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNovelChapterListByNovelUrl_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNovelChapterListByNovelUrl_resultTupleSchemeFactory();

    public NovelChapter success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NovelChapter.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNovelChapterListByNovelUrl_result.class, metaDataMap);
    }

    public getNovelChapterListByNovelUrl_result() {
    }

    public getNovelChapterListByNovelUrl_result(
      NovelChapter success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNovelChapterListByNovelUrl_result(getNovelChapterListByNovelUrl_result other) {
      if (other.isSetSuccess()) {
        this.success = new NovelChapter(other.success);
      }
    }

    public getNovelChapterListByNovelUrl_result deepCopy() {
      return new getNovelChapterListByNovelUrl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NovelChapter getSuccess() {
      return this.success;
    }

    public getNovelChapterListByNovelUrl_result setSuccess(NovelChapter success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NovelChapter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNovelChapterListByNovelUrl_result)
        return this.equals((getNovelChapterListByNovelUrl_result)that);
      return false;
    }

    public boolean equals(getNovelChapterListByNovelUrl_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNovelChapterListByNovelUrl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNovelChapterListByNovelUrl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNovelChapterListByNovelUrl_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNovelChapterListByNovelUrl_resultStandardScheme getScheme() {
        return new getNovelChapterListByNovelUrl_resultStandardScheme();
      }
    }

    private static class getNovelChapterListByNovelUrl_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNovelChapterListByNovelUrl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNovelChapterListByNovelUrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NovelChapter();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNovelChapterListByNovelUrl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNovelChapterListByNovelUrl_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNovelChapterListByNovelUrl_resultTupleScheme getScheme() {
        return new getNovelChapterListByNovelUrl_resultTupleScheme();
      }
    }

    private static class getNovelChapterListByNovelUrl_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNovelChapterListByNovelUrl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNovelChapterListByNovelUrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNovelChapterListByNovelUrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NovelChapter();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
