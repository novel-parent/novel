/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.IDL;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-05-15")
public class NovelChapterContext implements org.apache.thrift.TBase<NovelChapterContext, NovelChapterContext._Fields>, java.io.Serializable, Cloneable, Comparable<NovelChapterContext> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NovelChapterContext");

  private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_CHAPTER_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChapter", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NEXT_CHAPTER_FIELD_DESC = new org.apache.thrift.protocol.TField("nextChapter", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NOVEL_CHAPTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("novelChapterName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NovelChapterContextStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NovelChapterContextTupleSchemeFactory();

  public String context; // optional
  public String lastChapter; // optional
  public String nextChapter; // optional
  public String novelChapterName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTEXT((short)1, "context"),
    LAST_CHAPTER((short)2, "lastChapter"),
    NEXT_CHAPTER((short)3, "nextChapter"),
    NOVEL_CHAPTER_NAME((short)4, "novelChapterName");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTEXT
          return CONTEXT;
        case 2: // LAST_CHAPTER
          return LAST_CHAPTER;
        case 3: // NEXT_CHAPTER
          return NEXT_CHAPTER;
        case 4: // NOVEL_CHAPTER_NAME
          return NOVEL_CHAPTER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CONTEXT,_Fields.LAST_CHAPTER,_Fields.NEXT_CHAPTER,_Fields.NOVEL_CHAPTER_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.LAST_CHAPTER, new org.apache.thrift.meta_data.FieldMetaData("lastChapter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.NEXT_CHAPTER, new org.apache.thrift.meta_data.FieldMetaData("nextChapter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.NOVEL_CHAPTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("novelChapterName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NovelChapterContext.class, metaDataMap);
  }

  public NovelChapterContext() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NovelChapterContext(NovelChapterContext other) {
    if (other.isSetContext()) {
      this.context = other.context;
    }
    if (other.isSetLastChapter()) {
      this.lastChapter = other.lastChapter;
    }
    if (other.isSetNextChapter()) {
      this.nextChapter = other.nextChapter;
    }
    if (other.isSetNovelChapterName()) {
      this.novelChapterName = other.novelChapterName;
    }
  }

  public NovelChapterContext deepCopy() {
    return new NovelChapterContext(this);
  }

  @Override
  public void clear() {
    this.context = null;
    this.lastChapter = null;
    this.nextChapter = null;
    this.novelChapterName = null;
  }

  public String getContext() {
    return this.context;
  }

  public NovelChapterContext setContext(String context) {
    this.context = context;
    return this;
  }

  public void unsetContext() {
    this.context = null;
  }

  /** Returns true if field context is set (has been assigned a value) and false otherwise */
  public boolean isSetContext() {
    return this.context != null;
  }

  public void setContextIsSet(boolean value) {
    if (!value) {
      this.context = null;
    }
  }

  public String getLastChapter() {
    return this.lastChapter;
  }

  public NovelChapterContext setLastChapter(String lastChapter) {
    this.lastChapter = lastChapter;
    return this;
  }

  public void unsetLastChapter() {
    this.lastChapter = null;
  }

  /** Returns true if field lastChapter is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChapter() {
    return this.lastChapter != null;
  }

  public void setLastChapterIsSet(boolean value) {
    if (!value) {
      this.lastChapter = null;
    }
  }

  public String getNextChapter() {
    return this.nextChapter;
  }

  public NovelChapterContext setNextChapter(String nextChapter) {
    this.nextChapter = nextChapter;
    return this;
  }

  public void unsetNextChapter() {
    this.nextChapter = null;
  }

  /** Returns true if field nextChapter is set (has been assigned a value) and false otherwise */
  public boolean isSetNextChapter() {
    return this.nextChapter != null;
  }

  public void setNextChapterIsSet(boolean value) {
    if (!value) {
      this.nextChapter = null;
    }
  }

  public String getNovelChapterName() {
    return this.novelChapterName;
  }

  public NovelChapterContext setNovelChapterName(String novelChapterName) {
    this.novelChapterName = novelChapterName;
    return this;
  }

  public void unsetNovelChapterName() {
    this.novelChapterName = null;
  }

  /** Returns true if field novelChapterName is set (has been assigned a value) and false otherwise */
  public boolean isSetNovelChapterName() {
    return this.novelChapterName != null;
  }

  public void setNovelChapterNameIsSet(boolean value) {
    if (!value) {
      this.novelChapterName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTEXT:
      if (value == null) {
        unsetContext();
      } else {
        setContext((String)value);
      }
      break;

    case LAST_CHAPTER:
      if (value == null) {
        unsetLastChapter();
      } else {
        setLastChapter((String)value);
      }
      break;

    case NEXT_CHAPTER:
      if (value == null) {
        unsetNextChapter();
      } else {
        setNextChapter((String)value);
      }
      break;

    case NOVEL_CHAPTER_NAME:
      if (value == null) {
        unsetNovelChapterName();
      } else {
        setNovelChapterName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTEXT:
      return getContext();

    case LAST_CHAPTER:
      return getLastChapter();

    case NEXT_CHAPTER:
      return getNextChapter();

    case NOVEL_CHAPTER_NAME:
      return getNovelChapterName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTEXT:
      return isSetContext();
    case LAST_CHAPTER:
      return isSetLastChapter();
    case NEXT_CHAPTER:
      return isSetNextChapter();
    case NOVEL_CHAPTER_NAME:
      return isSetNovelChapterName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NovelChapterContext)
      return this.equals((NovelChapterContext)that);
    return false;
  }

  public boolean equals(NovelChapterContext that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_context = true && this.isSetContext();
    boolean that_present_context = true && that.isSetContext();
    if (this_present_context || that_present_context) {
      if (!(this_present_context && that_present_context))
        return false;
      if (!this.context.equals(that.context))
        return false;
    }

    boolean this_present_lastChapter = true && this.isSetLastChapter();
    boolean that_present_lastChapter = true && that.isSetLastChapter();
    if (this_present_lastChapter || that_present_lastChapter) {
      if (!(this_present_lastChapter && that_present_lastChapter))
        return false;
      if (!this.lastChapter.equals(that.lastChapter))
        return false;
    }

    boolean this_present_nextChapter = true && this.isSetNextChapter();
    boolean that_present_nextChapter = true && that.isSetNextChapter();
    if (this_present_nextChapter || that_present_nextChapter) {
      if (!(this_present_nextChapter && that_present_nextChapter))
        return false;
      if (!this.nextChapter.equals(that.nextChapter))
        return false;
    }

    boolean this_present_novelChapterName = true && this.isSetNovelChapterName();
    boolean that_present_novelChapterName = true && that.isSetNovelChapterName();
    if (this_present_novelChapterName || that_present_novelChapterName) {
      if (!(this_present_novelChapterName && that_present_novelChapterName))
        return false;
      if (!this.novelChapterName.equals(that.novelChapterName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetContext()) ? 131071 : 524287);
    if (isSetContext())
      hashCode = hashCode * 8191 + context.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastChapter()) ? 131071 : 524287);
    if (isSetLastChapter())
      hashCode = hashCode * 8191 + lastChapter.hashCode();

    hashCode = hashCode * 8191 + ((isSetNextChapter()) ? 131071 : 524287);
    if (isSetNextChapter())
      hashCode = hashCode * 8191 + nextChapter.hashCode();

    hashCode = hashCode * 8191 + ((isSetNovelChapterName()) ? 131071 : 524287);
    if (isSetNovelChapterName())
      hashCode = hashCode * 8191 + novelChapterName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NovelChapterContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContext()).compareTo(other.isSetContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, other.context);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChapter()).compareTo(other.isSetLastChapter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChapter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChapter, other.lastChapter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextChapter()).compareTo(other.isSetNextChapter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextChapter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextChapter, other.nextChapter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNovelChapterName()).compareTo(other.isSetNovelChapterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNovelChapterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.novelChapterName, other.novelChapterName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NovelChapterContext(");
    boolean first = true;

    if (isSetContext()) {
      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
    }
    if (isSetLastChapter()) {
      if (!first) sb.append(", ");
      sb.append("lastChapter:");
      if (this.lastChapter == null) {
        sb.append("null");
      } else {
        sb.append(this.lastChapter);
      }
      first = false;
    }
    if (isSetNextChapter()) {
      if (!first) sb.append(", ");
      sb.append("nextChapter:");
      if (this.nextChapter == null) {
        sb.append("null");
      } else {
        sb.append(this.nextChapter);
      }
      first = false;
    }
    if (isSetNovelChapterName()) {
      if (!first) sb.append(", ");
      sb.append("novelChapterName:");
      if (this.novelChapterName == null) {
        sb.append("null");
      } else {
        sb.append(this.novelChapterName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NovelChapterContextStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NovelChapterContextStandardScheme getScheme() {
      return new NovelChapterContextStandardScheme();
    }
  }

  private static class NovelChapterContextStandardScheme extends org.apache.thrift.scheme.StandardScheme<NovelChapterContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NovelChapterContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.context = iprot.readString();
              struct.setContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_CHAPTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChapter = iprot.readString();
              struct.setLastChapterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEXT_CHAPTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextChapter = iprot.readString();
              struct.setNextChapterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOVEL_CHAPTER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.novelChapterName = iprot.readString();
              struct.setNovelChapterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NovelChapterContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.context != null) {
        if (struct.isSetContext()) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          oprot.writeString(struct.context);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastChapter != null) {
        if (struct.isSetLastChapter()) {
          oprot.writeFieldBegin(LAST_CHAPTER_FIELD_DESC);
          oprot.writeString(struct.lastChapter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nextChapter != null) {
        if (struct.isSetNextChapter()) {
          oprot.writeFieldBegin(NEXT_CHAPTER_FIELD_DESC);
          oprot.writeString(struct.nextChapter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.novelChapterName != null) {
        if (struct.isSetNovelChapterName()) {
          oprot.writeFieldBegin(NOVEL_CHAPTER_NAME_FIELD_DESC);
          oprot.writeString(struct.novelChapterName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NovelChapterContextTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NovelChapterContextTupleScheme getScheme() {
      return new NovelChapterContextTupleScheme();
    }
  }

  private static class NovelChapterContextTupleScheme extends org.apache.thrift.scheme.TupleScheme<NovelChapterContext> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NovelChapterContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetContext()) {
        optionals.set(0);
      }
      if (struct.isSetLastChapter()) {
        optionals.set(1);
      }
      if (struct.isSetNextChapter()) {
        optionals.set(2);
      }
      if (struct.isSetNovelChapterName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetContext()) {
        oprot.writeString(struct.context);
      }
      if (struct.isSetLastChapter()) {
        oprot.writeString(struct.lastChapter);
      }
      if (struct.isSetNextChapter()) {
        oprot.writeString(struct.nextChapter);
      }
      if (struct.isSetNovelChapterName()) {
        oprot.writeString(struct.novelChapterName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NovelChapterContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.context = iprot.readString();
        struct.setContextIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastChapter = iprot.readString();
        struct.setLastChapterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nextChapter = iprot.readString();
        struct.setNextChapterIsSet(true);
      }
      if (incoming.get(3)) {
        struct.novelChapterName = iprot.readString();
        struct.setNovelChapterNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

